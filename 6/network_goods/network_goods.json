{"openapi": "3.1.0", "info": {"title": "FastAPI", "version": "0.1.0"}, "paths": {"/locations/": {"get": {"summary": "Get Locations", "description": "Retrieves a list of all locations in the system.\n\nReturns:\n- A list of Location objects, each representing a different location.", "operationId": "get_locations_locations__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/Location"}, "type": "array", "title": "Response Get Locations Locations  Get"}}}}}}, "post": {"summary": "Create Location", "description": "Creates a new location in the system.\n\nParameters:\n- **location**: An object containing the location ID, name, and type.\n\nReturns:\n- The newly created Location object.", "operationId": "create_location_locations__post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Location"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Location"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/locations/{location_id}": {"get": {"summary": "Get Location", "description": "Retrieves information about a specific location by its ID.\n\nParameters:\n- **location_id**: The unique identifier for the requested location.\n\nReturns:\n- The Location object corresponding to the specified ID.\n\nRaises:\n- HTTPException: If the location is not found (404).", "operationId": "get_location_locations__location_id__get", "parameters": [{"name": "location_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Location Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Location"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/items/": {"get": {"summary": "Get Items", "description": "Retrieves a list of all items in the system.\n\nReturns:\n- A list of Item objects, each representing a different item.", "operationId": "get_items_items__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/Item"}, "type": "array", "title": "Response Get Items Items  Get"}}}}}}}, "/locations/{location_id}/inventory/": {"get": {"summary": "Get Inventory", "description": "Retrieves the inventory of items for a specific location.\n\nParameters:\n- **location_id**: The unique identifier for the location.\n\nReturns:\n- A dictionary mapping item IDs\n    to their current quantities in the specified location.\n\nRaises:\n- HTTPException: If the location is not found (404).", "operationId": "get_inventory_locations__location_id__inventory__get", "parameters": [{"name": "location_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Location Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {"type": "integer"}, "title": "Response Get Inventory Locations  Location Id  Inventory  Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "put": {"summary": "Update Inventory", "description": "Updates the quantity of an item in the specified location's inventory.\n\nParameters:\n- **location_id**: The unique identifier for the location\n    where the inventory is updated.\n- **update_request**: An object containing the item ID\n    and the change in quantity.\n\nReturns:\n- A dictionary of the updated inventory for the specified location.\n\nRaises:\n- HTTPException: If the location is not found (404),\n    if the item is not found (404),\n    or if the resulting inventory would be negative (400).", "operationId": "update_inventory_locations__location_id__inventory__put", "parameters": [{"name": "location_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Location Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateInventoryRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {"type": "integer"}, "title": "Response Update Inventory Locations  Location Id  Inventory  Put"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/locations/{location_id}/excess_inventory/": {"get": {"summary": "Get Excess Inventory", "description": "Returns items that exceed the maximum allowable quantity\nin the specified location.\n\nParameters:\n- **location_id**: The unique identifier for the location to check.\n\nReturns:\n- A dictionary of item IDs that have excess inventory,\n    with their quantities.\n\nRaises:\n- HTTPException: If the location is not found (404).", "operationId": "get_excess_inventory_locations__location_id__excess_inventory__get", "parameters": [{"name": "location_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Location Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {"type": "integer"}, "title": "Response Get Excess Inventory Locations  Location Id  Excess Inventory  Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/locations/{location_id}/missing_inventory/": {"get": {"summary": "Get Missing Inventory", "description": "Returns items that are below the minimum allowable quantity\nin the specified location.\n\nParameters:\n- **location_id**: The unique identifier for the location to check.\n\nReturns:\n- A dictionary of item IDs that have missing inventory,\n    with their quantities.\n\nRaises:\n- HTTPException: If the location is not found (404).", "operationId": "get_missing_inventory_locations__location_id__missing_inventory__get", "parameters": [{"name": "location_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Location Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "additionalProperties": {"type": "integer"}, "title": "Response Get Missing Inventory Locations  Location Id  Missing Inventory  Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/locations/{location_id}/purchases/": {"post": {"summary": "Create Purchase", "description": "Creates a purchase of an item in the specified location,\nreducing the item's quantity in inventory.\n\nParameters:\n- **location_id**: The unique identifier for the location\n    where the purchase is made.\n- **purchase**: An object containing the item ID\n    and the quantity to be purchased.\n\nReturns:\n- The Purchase object containing the item ID and quantity purchased.\n\nRaises:\n- HTTPException: If the location is not found (404),\n    if the item is not found (404),\n    or if there is insufficient inventory\n    for the requested purchase (400).", "operationId": "create_purchase_locations__location_id__purchases__post", "parameters": [{"name": "location_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Location Id"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Purchase"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Purchase"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "get": {"summary": "Get Purchases", "description": "Retrieves all purchases for the specified location.\n\nParameters:\n- **location_id**: The unique identifier\n    for the location whose purchases are to be retrieved.\n\nReturns:\n- A list of Purchase objects representing all purchases made\n    in the specified location.\n\nRaises:\n- HTTPException: If the location is not found (404).", "operationId": "get_purchases_locations__location_id__purchases__get", "parameters": [{"name": "location_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Location Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/Purchase"}, "title": "Response Get Purchases Locations  Location Id  Purchases  Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "Item": {"properties": {"id": {"type": "string", "title": "Id"}, "name": {"type": "string", "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "min_quantity": {"type": "integer", "title": "Min Quantity"}, "max_quantity": {"type": "integer", "title": "Max Quantity"}}, "type": "object", "required": ["id", "name", "min_quantity", "max_quantity"], "title": "Item", "description": "Represents an item available in the inventory.\n\nAttributes:\n- id: Unique identifier for the item (str).\n- name: Name of the item (str).\n- description: (Optional) A description of the item (str).\n- min_quantity: The minimum quantity required to avoid stockouts (int).\n- max_quantity: The maximum quantity that can be stored for the item (int)."}, "Location": {"properties": {"id": {"type": "integer", "title": "Id"}, "name": {"type": "string", "title": "Name"}, "location": {"type": "string", "title": "Location"}, "inventory": {"additionalProperties": {"type": "integer"}, "type": "object", "title": "Inventory", "default": {}}}, "type": "object", "required": ["id", "name", "location"], "title": "Location", "description": "Represents a storage location within the inventory system.\n\nAttributes:\n- id: Unique identifier for the location (int).\n- name: Name of the location (str).\n- location: Physical address or description of the location (str).\n- inventory: A dictionary mapping item IDs to their quantities at this location (Dict[str, int])."}, "Purchase": {"properties": {"item_id": {"type": "string", "title": "Item Id"}, "quantity": {"type": "integer", "title": "Quantity"}}, "type": "object", "required": ["item_id", "quantity"], "title": "Purchase", "description": "Represents a purchase transaction for an item.\n\nAttributes:\n- item_id: Unique identifier for the item being purchased (str).\n- quantity: The quantity of the item being purchased (int)."}, "UpdateInventoryRequest": {"properties": {"item_id": {"type": "string", "title": "Item Id"}, "quantity_change": {"type": "integer", "title": "Quantity Change"}}, "type": "object", "required": ["item_id", "quantity_change"], "title": "UpdateInventoryRequest", "description": "Represents a request to update the inventory for an item.\n\nAttributes:\n- item_id: Unique identifier for the item whose inventory is being updated (str).\n- quantity_change: The change in quantity for the item (int)."}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}}}}